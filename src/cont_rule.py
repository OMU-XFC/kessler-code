import numpy as np

from src.rule import membership


class Rules:
    def __init__(self):
        pass
    def switch(self, x):
        print(x)
        if x == [1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0]: Average = [-0.31741292, -0.11560339, 0.24417723]
        if x == [1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 0, 0]: Average = [-0.19276379, -0.49196508, -0.28833028]
        if x == [1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 0, 1]: Average = [0.71174574, 0.77342892, -1.]
        if x == [1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1]: Average = [-1., -1., -1.]
        if x == [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0]: Average = [-0.26801219, -0.59496155, 0.22442133]
        if x == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0]: Average = [1., 0.24879146, 1.]
        if x == [2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 0, 0]: Average = [-0.03047927, -0.1802766, 0.05516125]
        if x == [2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1]: Average = [-1. -0.22942507, -0.18222828]
        if x == [2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 0]: Average = [-0.41015363, -0.18042396, -0.46735266]
        if x == [0, 2, 2, 2, 2, 0, 2, 2, 1, 2, 2, 2, 0]: Average = [-0.03844548, -0.15468543, -0.03143341]
        if x == [1, 2, 2, 2, 2, 0, 2, 2, 1, 2, 2, 2, 0]: Average = [0.44813895, -0.73795589, -0.36646113]
        if x == [0, 2, 2, 2, 2, 0, 2, 2, 1, 2, 2, 2, 1]: Average = [0.03029714, -0.39314054, -0.32758208]
        if x == [0, 2, 2, 2, 2, 0, 2, 2, 1, 2, 2, 1, 0]: Average = [-0.52734583, 0.08717117, -0.15128941]
        if x == [0, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 1, 0]: Average = [-0.31576779, -0.82506013, 0.00694524]
        if x == [0, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 0]: Average = [-0.0960098, -0.04550654, 0.1987716]
        if x == [1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 0]: Average = [-0.06957758, -0.05446745, 0.4922903]
        if x == [1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1]: Average = [-0.72774765, 0.4316121, 0.14729926]
        if x == [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0]: Average = [-0.00145372, -0.04177914, 0.21356404]
        if x == [1, 2, 2, 2, 2, 0, 2, 2, 1, 2, 2, 1, 0]: Average = [0.01915899, -0.12253948, -0.49802843]
        if x == [1, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 1, 0]: Average = [0.21033763, 0.45725899, -0.82480673]
        if x == [1, 2, 2, 2, 2, 0, 2, 2, 1, 2, 2, 1, 1]: Average = [-0.30201599, 0.36430139, -0.30529719]
        if x == [1, 2, 2, 2, 2, 0, 2, 2, 1, 2, 2, 1, 2]: Average = [-0.86797523, -1., -0.62278485]
        return Average

    def membership(self, x, k):
        # q1が0から始まるからk=k-1
        K = 3
        if k == 3: return 1.0
        b = 1 / (K - 1)
        a = k / (K - 1)

        return (max(0, (1 - np.abs(a - x) / b)))

    def fuzzy_control(self, input_value):
        rules = [
            ([1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0], [-0.31741292, -0.11560339, 0.24417723]),
            ([1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 0, 0], [-0.19276379, -0.49196508, -0.28833028]),
            # 他のルールも同様に追加
        ]

        outputs = []

        for rule in rules:
            condition, output = rule
            similarity = membership(input_value, 1)
            print(similarity, output)
            outputs.append(np.multiply(similarity, output))

        aggregated_output = np.sum(outputs, axis=0) / len(rules)  # 各ルールの出力を平均化
        return aggregated_output


# テスト用の入力値
input_value = [1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0]
cont = Rules()
output = cont.switch(input_value)
print("制御出力:", output)
